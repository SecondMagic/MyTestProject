<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache/ehcache.xml" />
    </bean>

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="com.java.spring.shiro.RetryLimitHashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5" />
        <property name="hashIterations" value="2" />
        <property name="storedCredentialsHexEncoded" value="true" />
    </bean>

    <!-- Realm实现 -->
    <bean id="userRealm" class="com.java.spring.shiro.UserRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher" />
    </bean>
    
    <!-- 会话ID生成器 --> 
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>   
    <!-- 会话DAO，sessionManager里面的session需要保存在会话Dao里，没有会话Dao，session是瞬时的，没法从  
     sessionManager里面拿到session --> 	 
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">  
	    <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>  
	    <property name="sessionIdGenerator" ref="sessionIdGenerator"/>  
	</bean> 
	<!-- 重写AccessControlFilter来实现限制异地同时登入功能-->
	<bean id="KickoutSessionFilter"  class="com.java.spring.shiro.KickoutSessionFilter">    
    <property name="sessionManager" ref="sessionManager"/>    
    <property name="cacheManager" ref="shiroEhcacheManager"/>  
    <property name="kickoutAfter" value="false"/>    
    <property name="maxSession" value="1"/>    
    <property name="kickoutUrl" value="/index?kickout=1"/>    
	</bean>
	
	<!-- 会话Cookie模板 -->  
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">  
	    <constructor-arg value="sid"/>  
	    <property name="httpOnly" value="true"/>  
	    <property name="maxAge" value="180000"/>  
	</bean>
    <!-- 30天  --> 
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">  
	    <constructor-arg value="rememberMe"/>  
	    <property name="httpOnly" value="true"/>  
	    <property name="maxAge" value="2592000"/>  
	</bean> 
	<!-- rememberMe管理器   rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位） -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>
	<!-- 会话验证调度器 -->  
	<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">  
	    <property name="interval" value="28800000"/>  
	    <property name="sessionManager" ref="sessionManager"/>  
	</bean>
	<!-- 会话监听-->
	<bean id="mySessionListener" class="com.java.spring.shiro.MySessionListener">		
	</bean>
	<!-- 会话管理器 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">  
	    <property name="globalSessionTimeout" value="28800000"/>  
	    <property name="deleteInvalidSessions" value="true"/>  
	    <property name="sessionValidationSchedulerEnabled" value="true"/>  
	    <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>  
	    <property name="sessionDAO" ref="sessionDAO"/>  
	    <property name="sessionIdCookieEnabled" value="true"/>  
        <property name="sessionIdCookie" ref="sessionIdCookie"/> 
        <property name="sessionListeners" ref="mySessionListener"/> 	
    </bean>	
 	<!-- 如果要实现cas的remember me的功能，需要用到下面这个bean，并设置到securityManager的subjectFactory中  --> 
    <bean id="casSubjectFactory" class="org.apache.shiro.cas.CasSubjectFactory" />
    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm" />
        <property name="sessionManager" ref="sessionManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
        <!-- 缓存管理器 -->
        <property name="cacheManager" ref="shiroEhcacheManager" />
    </bean>
    
    <!-- remember me 相关--> 
    <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
    <property name="rememberMeParam" value="rememberMe"/>
    </bean>
    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <property name="loginUrl" value="/index" />
        <property name="unauthorizedUrl" value="/" />
        <!-- 过滤链定义 -->    
        <property name="filters">    
         <map>    
             <entry key="kickout" value-ref="KickoutSessionFilter"/>    
         </map>    
     	</property>
        <property name="filterChainDefinitions">
            <value>
                /authc/admin = roles[admin]
                /authc/** = authc
            	/uploadFile = authc
            	/view = kickout,authc
                /** = kickout,anon
            </value>
        </property>
    </bean>
    
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
</beans>